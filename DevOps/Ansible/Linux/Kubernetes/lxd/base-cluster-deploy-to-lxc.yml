- hosts: all
  become: yes
  vars:
    # Must container master in the name
    control_plane: "kmaster"
    # Worker names, kworker-1 , kworker-2, kworker-3, ... kworker-{{ number_of_workers }}
    worker_prefix: "kworker"
    number_of_workers: 1
  tasks:
    - name: Copy over script
      copy:
        content: |
          #!/bin/bash
          # Create /etc/modules-load.d/k8s.conf for all worker nodes
          cat <<EOL | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOL

          # Load the modules
          sudo modprobe overlay
          sudo modprobe br_netfilter

          # Configure kernel parameters for all nodes
          cat <<EOL | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOL

          # Apply the changes
          sudo sysctl --system
          sudo apt-get update
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt update && sudo apt install -y containerd.io
          containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
          sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
          sudo systemctl restart containerd && sudo systemctl enable containerd
          sudo apt update && sudo apt install -y apt-transport-https ca-certificates curl gpg
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
          echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
          sudo apt update && sudo apt install -y kubelet kubeadm kubectl && sudo apt-mark hold kubelet kubeadm kubectl
        dest: /tmp/kubernetes_setup_script.sh
        mode: "0755"

    - name: Set limits for default profile
      shell: |
        lxc profile set default limits.memory=2GB
        lxc profile set default limits.cpu=1

    - name: Create container on another node
      lxd_container:
        name: "{{ control_plane }}"
        type: virtual-machine
        state: started
        ignore_volatile_options: true
        wait_for_ipv4_addresses: true
        profiles: ["default"]
        source:
          protocol: simplestreams
          type: image
          mode: pull
          server: https://images.linuxcontainers.org
          alias: ubuntu/22.04/cloud
        timeout: 600

    - name: Create container on another node
      lxd_container:
        name: "{{ item }}"
        type: virtual-machine
        state: started
        ignore_volatile_options: true
        wait_for_ipv4_addresses: true
        profiles: ["default"]
        source:
          protocol: simplestreams
          type: image
          mode: pull
          server: https://images.linuxcontainers.org
          alias: ubuntu/22.04/cloud
        timeout: 600
      loop: "{{ range(1, number_of_workers|int + 1) | map('string') | map('regex_replace', '^', worker_prefix) | map('join', '') | list }}"

    - name: Copy script over and execute.
      shell: |
        lxc file push /tmp/kubernetes_setup_script.sh  {{ control_plane }}/root/
        lxc exec {{ control_plane }} -- chmod +x /root/kubernetes_setup_script.sh
        lxc exec {{ control_plane }} -- /root/kubernetes_setup_script.sh
