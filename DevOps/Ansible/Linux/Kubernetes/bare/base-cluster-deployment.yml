---
- hosts: all
  become: yes
  vars:
    start_index: 1
    k8s_package_version: "v1.29"
    k8s_release_key_url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_package_version }}/deb/Release.key"
    k8s_signed_by_url: "https://pkgs.k8s.io/core:/stable:/{{ k8s_package_version }}/deb/"
    k8s_apt_keyring_path: "/etc/apt/keyrings/kubernetes-apt-keyring.gpg"
    k8s_sources_list_path: "/etc/apt/sources.list.d/kubernetes.list"
  tasks:
    - name: Install required tools
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: yes

    - name: Disable Swap File
      shell: swapoff -a

    - name: Check if /etc/fstab file exists
      stat:
        path: /etc/fstab
      register: fstab_file

    - name: Remove Swap file from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: ".*swap.*"
        replace: ""
      when: fstab_file.stat.exists

    - name: Create /etc/modules-load.d/k8s.conf for all worker nodes
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: Load the modules
      shell: sudo modprobe overlay && sudo modprobe br_netfilter
    - name: Load the modules
      modprobe:
        name: "{{ item }}"
      with_items:
        - overlay
        - br_netfilter

    # - name: Configure kernel parameters for all nodes
    #   copy:
    #     content: |
    #       net.bridge.bridge-nf-call-iptables  = 1
    #       net.bridge.bridge-nf-call-ip6tables = 1
    #       net.ipv4.ip_forward                 = 1
    #     dest: /etc/sysctl.d/k8s.conf
    - name: Configure kernel parameters for all nodes
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
      with_items:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

    - name: Apply the changes
      shell: sudo sysctl --system

    - name: Set hostname for masters
      hostname:
        name: "k8-master-{{ start_index + groups['masters'].index(inventory_hostname) }}"
      when: "'masters' in group_names"

    - name: Set hostname for workers
      hostname:
        name: "k8-worker-{{ start_index + groups['workers'].index(inventory_hostname) }}"
      when: "'workers' in group_names"

    - name: Backup /etc/hosts file (Incase we are updating, or there are existing entries.)
      shell: mv /etc/hosts /etc/hosts.bak
      ignore_errors: true

    - name: Add initial entries to /etc/hosts
      copy:
        content: |
          127.0.0.1 localhost
          127.0.1.1 localhost

          # The following lines are desirable for IPv6 capable hosts
          ::1     ip6-localhost ip6-loopback
          fe00::0 ip6-localnet
          ff00::0 ip6-mcastprefix
          ff02::1 ip6-allnodes
          ff02::2 ip6-allrouters

          # Custom
        dest: /etc/hosts

    - name: Update 127.0.1.1 entry in /etc/hosts
      replace:
        path: /etc/hosts
        regexp: ".*127.0.1.1.*"
        replace: "127.0.1.1 {{ ansible_hostname }}"

    - name: Add entries to /etc/hosts for all hosts
      lineinfile:
        path: /etc/hosts
        line: "{{ hostvars[item]['inventory_hostname'] }} {{ hostvars[item]['ansible_hostname'] }}"
        create: yes
      loop: "{{ groups['all'] }}"
      loop_control:
        loop_var: item

    - name: Install stuff
      shell: |
        apt-get update
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --yes --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
        echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        apt-get update
        apt update && apt install -y containerd.io
        containerd config default | tee /etc/containerd/config.toml >/dev/null 2>&1
        sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
        systemctl restart containerd && systemctl enable containerd
        apt update && apt install -y apt-transport-https ca-certificates curl gpg

    - name: Install Kubernetes GPG key
      shell: |
        curl -fsSL {{ k8s_release_key_url }} | sudo gpg --yes --dearmor -o {{ k8s_apt_keyring_path }}
      args:
        executable: /bin/bash

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb [signed-by={{ k8s_apt_keyring_path }}] {{ k8s_signed_by_url }} /
        state: present
        filename: kubernetes.list

    - name: Install and mark hold
      shell: sudo apt update && sudo apt install -y kubelet kubeadm kubectl && sudo apt-mark hold kubelet kubeadm kubectl

# Ansible playbook to initialize the master node
- hosts: masters
  become: yes # Run as root
  vars:
    user: user
    calico_helm_chart_url: "https://docs.tigera.io/calico/charts"
  tasks:
    - name: Install helm
      shell: snap install helm --classic
    - name: Check if the master node is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init
    - name: Initialize the master node
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Create .kube directory
      file:
        path: /home/{{ user }}/.kube
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0744
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Copy the kube config file
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ user }}/.kube/config
        remote_src: yes
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: 0644
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Add Calico Repo
      kubernetes.core.helm_repository:
        name: projectcalico
        repo_url: "{{ calico_helm_chart_url }}"
      become_user: "{{ user }}"
    - name: Install Calico
      kubernetes.core.helm:
        name: calico
        namespace: tigera-operator
        chart_ref: projectcalico/tigera-operator
        create_namespace: true
      become_user: "{{ user }}"
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: "{{ user }}"
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Display registered output
      debug:
        var: kubernetes_join_command.stdout_lines
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Create dummy host to store variable for node config
      add_host:
        name: "DUMMY_HOST"
        JOIN_COMMAND: "{{ kubernetes_join_command.stdout_lines[0] }}"
      when: kubeadm_init.stat.exists == false # Only run if the master node is not already initialized
    - name: Change KubeConfig permissions
      shell: chmod go-r /home/{{ user }}/.kube/config
    - name: Install helm
      shell: sudo snap install helm --classic

# Ansible playbook to join the worker nodes to the cluster
- hosts: workers
  become: yes # Run as root
  tasks:
    - name: Check if the worker node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_already_joined
    - name: Debug Information
      debug:
        var: hostvars['DUMMY_HOST']
    - name: Join the worker nodes to the cluster
      command: "{{ hostvars['DUMMY_HOST']['JOIN_COMMAND'] }}"
      become: yes
      when: kubeadm_already_joined.stat.exists == false # Only run if the worker node is not already joined
